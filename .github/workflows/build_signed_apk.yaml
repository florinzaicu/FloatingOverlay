name: Build signed APK
run-name: Build signed ${{ inputs.compile_type }} APK (triggered by ${{ github.event_name }})
on:
  workflow_call:
    inputs:
      compile_type:
        required: true
        type: string
        description: Type of APK build (debug/release)
    outputs:
      apk_name:
        description: "Path of compiled signed APK artifact"
        value: ${{ jobs.build_apk.outputs.apk_name }}
      app_version:
          description: "Current version of the compiled app (from meta file)"
          value: ${{ jobs.build_apk.outputs.app_version }}
      app_major_version:
        description: "Current major version of the compiled app (from meta file)"
        value: ${{ jobs.build_apk.outputs.app_major_version }}

env:
  # Version of compiled APK (extracted post compilation from meta file)
  APK_VERSION: ""
  # APK output metadata file path
  APK_META_PATH: "app/build/outputs/apk/${{ inputs.compile_type }}/output-metadata.json"
  # Output compiled APK path
  APK_COMPILE_PATH: "app/build/outputs/apk/${{ inputs.compile_type }}/app-${{ inputs.compile_type }}.apk"
  # Output path of all compiled artifacts to publish
  PUB_PATH: "PUB_OUT"
  # Path to keystore file
  KEY_PATH: ${{ inputs.compile_type }}.jks
jobs:
  build_apk:
    runs-on: ubuntu-latest
    outputs:
      apk_name: ${{ steps.pub_artifact.outputs.ARTIFACT_NAME }}
      app_version: ${{ steps.pub_artifact.outputs.APP_VERSION }}
      app_major_version: ${{ steps.pub_artifact.outputs.APP_MAJOR_VERSION }}
    steps:
      # Check out project and install dependencies
      - name: Checkout project
        uses: actions/checkout@v4
      - name: Install JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: 18
          distribution : 'temurin'
          cache: gradle
      - name: Setup gradle wrapper
        run: chmod +x gradlew

      # Inject the keystore for signing the APK
      - name: Injecting debug keystore file
        if: inputs.compile_type == 'debug'
        run:
          echo $DEBUG_KEYSTORE | base64 --decode > ${{ env.KEY_PATH}}
        env:
          DEBUG_KEYSTORE: ${{ secrets.DEBUG_KEYSTORE }}

      - name: Injecting release keystore file
        if: inputs.compile_type == 'release'
        run: echo $RELEASE_KEYSTORE | base64 --decode > "${{ env.KEY_PATH}}"
        env:
          RELEASE_KEYSTORE: ${{ secrets.RELEASE_KEYSTORE }}

      # Build APK
      - name: Build debug APK
        if: inputs.compile_type == 'debug'
        run: |
          ./gradlew assembleDebug -Pdebug_keystore=../${{ env.KEY_PATH }} -Pkey_alias=floatingoverlay -Pstore_pass=$STORE_PASS -Pkey_pass=$KEY_PASS
        env:
          STORE_PASS: ${{ secrets.DEBUG_KEYSTORE_PASS }}
          KEY_PASS: ${{ secrets.DEBUG_KEYSTORE_KEY_PASS }}

      - name: Build release APK
        if: inputs.compile_type == 'release'
        run: ./gradlew assembleRelease -Prelease_keystore=../${{ env.KEY_PATH }} -Pkey_alias=app.floatingoverlay -Pstore_pass=$STORE_PASS -Pkey_pass=$KEY_PASS
        env:
          STORE_PASS: ${{ secrets.RELEASE_KEYSTORE_PASS }}
          KEY_PASS: ${{ secrets.RELEASE_KEYSTORE_KEY_PASS }}

      # Extract APK version from output metadata file and prepare compiled file for publishing
      - name : Get compiled app version from output metadata file
        run: |
          out=`grep "versionName" "$APK_META_PATH" | awk '/"([^"]+)"/{ print $2 }' | cut -d'"' -f 2`
          echo "APK_VERSION=v$out" >> "$GITHUB_ENV"

      - name: "Preparing compiled APK for publishing (Version: ${{ env.APK_VERSION }})"
        run: |
          mkdir $PUB_PATH
          mv "$APK_COMPILE_PATH" "${{ env.PUB_PATH }}/app${{ env.APK_VERSION }}.apk"

      # Publish the artifact
      - name: Publish compiled APK (app${{ env.APK_VERSION }}.apk)
        uses: actions/upload-artifact@v3
        with:
          name: app${{ env.APK_VERSION }}.apk
          path: ${{ env.PUB_PATH}}
          retention-days: 5
          if-no-files-found: error

      - name: Output artifact name
        id: pub_artifact
        run: |
          echo "ARTIFACT_NAME=app${{ env.APK_VERSION }}.apk" >> "$GITHUB_OUTPUT"
          echo "APP_VERSION=${{ env.APK_VERSION }}" >> "$GITHUB_OUTPUT"
          major=`echo ${{ env.APK_VERSION }} | cut -d'.' -f1`
          echo "APP_MAJOR_VERSION=$major" >> "$GITHUB_OUTPUT"
